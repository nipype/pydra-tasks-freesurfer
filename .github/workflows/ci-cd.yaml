#This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# For deployment, it will be necessary to create a PyPI API token and store it as a secret
# https://docs.github.com/en/actions/reference/encrypted-secrets

name: CI/CD

on:
  release:
    types: [published]
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


permissions:
  contents: read
  pages: write
  id-token: write  

env: # Define environment variables
  # Force tox and pytest to use color
  FORCE_COLOR: true
jobs:

  build:
    name: Build & verify package
    runs-on: ubuntu-latest
    permissions:
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: hynek/build-and-inspect-python-package@v2
        with:
          attest-build-provenance-github: ${{ github.event_name != 'pull_request' }}

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.13']
      fail-fast: false

    steps:
    
    - name: Removed unnecessary tools to free space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Revert version to most recent version tag on Nipype or Nipype2Pydra update
      if: github.event_name == 'repository_dispatch'
      run: git checkout $(git tag -l | grep 'v.*' | tail -n 1 | awk -F post '{print $1}')

    - name: Create installation directory
      run: |
        sudo mkdir -p $FREESURFER_HOME
        sudo chown $USER $FREESURFER_HOME

    # - name: Cache Freesurfer Download
    #   id: cache-install
    #   uses: actions/cache@v4
    #   with:
    #     path: ${{ env.DOWNLOADS_DIR }}
    #     key: freesurfer-${{ env.FREESURFER_VERSION }}-${{ runner.os }}

    - name: Download FreeSurfer
      # if: steps.cache-install.outputs.cache-hit != 'true'
      run: |
        sudo mkdir -p $DOWNLOADS_DIR
        sudo chown $USER $DOWNLOADS_DIR
        curl -s -o $DOWNLOADS_DIR/freesurfer-linux-ubuntu22_amd64-${{ env.FREESURFER_VERSION }}.tar.gz \
          https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/${{ env.FREESURFER_VERSION }}/freesurfer-linux-ubuntu22_amd64-${{ env.FREESURFER_VERSION }}.tar.gz
      shell: bash

    - name: Install Freesurfer
      env:
        FREESURFER_LICENCE: ${{ secrets.FREESURFER_LICENCE }}
      run: |
        pushd $DOWNLOADS_DIR/
        tar -zxpf freesurfer-linux-ubuntu22_amd64-${{ env.FREESURFER_VERSION }}.tar.gz
        mv freesurfer/* ${{ env.FREESURFER_HOME }}
        popd
        source ${{ env.FREESURFER_HOME }}/SetUpFreeSurfer.sh
        echo $FREESURFER_LICENCE > ${{ env.FREESURFER_HOME }}/license.txt
        echo "PATH=${{ env.FREESURFER_HOME }}/bin:$PATH" >> $GITHUB_ENV     
 
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v6
    - name: Install tox
      run: |
        uv tool install tox --with=tox-uv --with=tox-gh-actions
    - name: Show tox config
      run: tox c
    - name: Run tox
      run: tox -v --exit-and-dump-after 1200
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}


  deploy-fileformats:
    needs: [devcheck, test]
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install build tools
      run: python -m pip install build twine

    - name: Build source and wheel distributions
      run: python -m build ./related-packages/fileformats

    - name: Check distributions
      run: twine check ./related-packages/fileformats/dist/*

    - name: Check for PyPI token on tag
      id: deployable
      if: github.event_name == 'release' || github.event_name == 'repository_dispatch'
      env:
        PYPI_API_TOKEN: "${{ secrets.PYPI_FILEFORMATS_API_TOKEN }}"
      run: if [ -n "$PYPI_API_TOKEN" ]; then echo "DEPLOY=true" >> $GITHUB_OUTPUT; fi

    - name: Upload to PyPI
      if: steps.deployable.outputs.DEPLOY
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_FILEFORMATS_API_TOKEN }}
        packages-dir: ./related-packages/fileformats/dist 

  deploy-fileformats-extras:
    needs: [deploy-fileformats]
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install build tools
      run: python -m pip install build twine

    - name: Build source and wheel distributions
      run: python -m build ./related-packages/fileformats-extras

    - name: Check distributions
      run: twine check ./related-packages/fileformats-extras/dist/*

    - name: Check for PyPI token on tag
      id: deployable
      if: github.event_name == 'release' || github.event_name == 'repository_dispatch'
      env:
        PYPI_API_TOKEN: "${{ secrets.PYPI_FILEFORMATS_EXTRAS_API_TOKEN }}"
      run: if [ -n "$PYPI_API_TOKEN" ]; then echo "DEPLOY=true" >> $GITHUB_OUTPUT; fi

    - name: Upload to PyPI
      if: steps.deployable.outputs.DEPLOY
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_FILEFORMATS_EXTRAS_API_TOKEN }}
        packages-dir: ./related-packages/fileformats-extras/dist 

  deploy:
    needs: [build, test, deploy-fileformats, deploy-fileformats-extras]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      attestations: write
      id-token: write
    steps:
    - name: Download dist
      uses: actions/download-artifact@v4
      with:
        name: Packages
        path: dist
    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

# Deploy on tags if PYPI_API_TOKEN is defined in the repository secrets.
# Secrets are not accessible in the if: condition [0], so set an output variable [1]
# [0] https://github.community/t/16928
# [1] https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter        
